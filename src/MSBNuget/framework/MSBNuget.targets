<!--
  MSBNuget is a collection of MSBuild scripts to support convention based Nuget package creation.
  Copyright (C) 2013  Daniel Sack

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see [http://www.gnu.org/licenses/].
  -->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" >


  <!-- Internal working properties, they are not intended to be changed direclty from caller -->
  <PropertyGroup>
    <msb-NugetStage Condition="'$(msb-NugetStage)'==''">$(MSBuildProjectDirectory)\obj\$(Configuration)\nugetstage\</msb-NugetStage>

    <msb-OutputPath Condition="'$(msb-OutputPath)'==''">$(OutputPath)</msb-OutputPath>
    <!-- TFS 2010/2012 support of OutDir overwrite -->
    <msb-OutputPath Condition="'$(OutDir)' != ''">$(OutDir)\$(Configuration)\NugetPackages\</msb-OutputPath>

    <!-- Filter out all folders which are not known by convention -->
    <NugetFilterOnlyConventionWellKnownFolders Condition="'$(NugetFilterOnlyConventionWellKnownFolders)' == ''">true</NugetFilterOnlyConventionWellKnownFolders>
    <!-- Filter to not include *.nuspec files from packages/; obj/; bin/-->
    <NugetNuspecExcludePattern Condition="'$(NugetNuspecExcludePattern)' == ''">$(MSBuildProjectDirectory)\packages\**;$(MSBuildProjectDirectory)\bin\**;$(MSBuildProjectDirectory)\obj\**;</NugetNuspecExcludePattern>

    <NugetBuildTargets>
      NugetCleanupFolderStructure;
      NugetCopyNuspec;
      NugetCopyAdditionalFiles;
      NugetCreatePackage;
    </NugetBuildTargets>
    <NugetFileHarvestTargets>
      Harvest_AdditionalFiles_From_WellKnownFoldersInFilesystem;
      Harvest_AdditionalFiles_From_Filesystem;
    </NugetFileHarvestTargets>
  </PropertyGroup>


  <ItemGroup>
    <!-- List of *.nuspec files which should be transformed -->
    <nuspec Include="$(MSBuildProjectDirectory)\**\*.nuspec"
            Exclude="$(NugetNuspecExcludePattern)"/>
  </ItemGroup>

  <Target Name="NugetCreatePackages">
    <CallTarget Targets="$(NugetBuildTargets)" />
  </Target>

  
  <Target Name="Harvest_AdditionalFiles_From_WellKnownFoldersInFilesystem" Condition="'$(NugetFilterOnlyConventionWellKnownFolders)' == 'true'">
    <!-- nuget convention based folder structure includes -->
    <ItemGroup>
      <additionalFiles Include="$(MSBuildProjectDirectory)\%(nuspec.Filename)\tools\**\*.*">
        <targetFolder>%(nuspec.Filename)\tools</targetFolder>
      </additionalFiles>
      <additionalFiles Include="$(MSBuildProjectDirectory)\%(nuspec.Filename)\content\**\*.*">
        <targetFolder>%(nuspec.Filename)\content</targetFolder>
      </additionalFiles>
      <additionalFiles Include="$(MSBuildProjectDirectory)\%(nuspec.Filename)\build\**\*.*">
        <targetFolder>%(nuspec.Filename)\build</targetFolder>
      </additionalFiles>
      <additionalFiles Include="$(MSBuildProjectDirectory)\%(nuspec.Filename)\lib\**\*.*">
        <targetFolder>%(nuspec.Filename)\lib</targetFolder>
      </additionalFiles>
    </ItemGroup>
  </Target>

  <Target Name="Harvest_AdditionalFiles_From_Filesystem" Condition="'$(NugetFilterOnlyConventionWellKnownFolders)' == 'false'">
    <!-- all folders under nuspec files-->
    <ItemGroup>
      <additionalFiles Include="$(MSBuildProjectDirectory)\%(nuspec.Filename)\**\*.*" Exclude="$(MSBuildProjectDirectory)\%(nuspec.Filename)\%(nuspec.Filename)%(nuspec.Extension).props">
        <targetFolder>%(nuspec.Filename)</targetFolder>
      </additionalFiles>
    </ItemGroup>
  </Target>

  
  
  <Target Name="NugetCopyAdditionalFiles"
          DependsOnTargets="$(NugetFileHarvestTargets)">

    <!-- try to evaluate 'physical path' if OutDir is present -->
    <ItemGroup>
      <_filesToCopy Include="@(additionalFiles)" Condition="Exists('%(additionalFiles.Identity)') == 'true'">
        <sourceFolder>%(additionalFiles.FullPath)</sourceFolder>
        <destinationFolder>$(msb-NugetStage)%(additionalFiles.targetFolder)\%(additionalFiles.RecursiveDir)</destinationFolder>
      </_filesToCopy>

      <!-- TFS 2010/2012/2013 workaround for OutDir -->
      <!-- binaries will be copied to OutDir if configuration in TFS is set to: SingleFolder -->
      <_filesToCopy Include="@(additionalFiles)" Condition="'$(OutDir)' != '' AND Exists('%(additionalFiles.Identity)') == 'false'">
        <sourceFolder>$(OutDir)%(additionalFiles.Filename)%(additionalFiles.Extension)</sourceFolder>
        <destinationFolder>$(msb-NugetStage)%(additionalFiles.targetFolder)\%(additionalFiles.RecursiveDir)</destinationFolder>
      </_filesToCopy>
    </ItemGroup>

    <Message Importance="high" 
             Text="File: %(_filesToCopy.Filename)%(_filesToCopy.Extension)%0D%0A identity: %(_filesToCopy.Identity)%0D%0A source: %(_filesToCopy.sourceFolder)%0D%0A destination: %(_filesToCopy.destinationFolder)" />

    <Copy SourceFiles="%(_filesToCopy.sourceFolder)"
          DestinationFolder="%(_filesToCopy.destinationFolder)"
          OverwriteReadOnlyFiles="true" ContinueOnError="true" />
  </Target>


  <Target Name="NugetCopyNuspec">
    <Copy SourceFiles="@(nuspec)"
          DestinationFolder="$(msb-NugetStage)%(nuspec.Filename)"
          OverwriteReadOnlyFiles="true" ContinueOnError="true"/>
  </Target>

  
  <Target Name="NugetCreatePackage" >
    <ItemGroup>
      <nuspecStaged Include="$(msb-NugetStage)%(nuspec.Filename)\*.nuspec"/>
    </ItemGroup>

    <Message Text="Nuget Global Override" Importance="normal"/>
    <Message Text="--> NugetVersion: $(NugetVersion)" Importance="normal"/>
    <Message Text="--> NugetMinClientVersion: $(NugetMinClientVersion)" Importance="normal"/>
    <Message Text="--> NugetCommandPackArguments: $(NugetCommandPackArguments)" Importance="normal"/>

    <Message Text="nuspecs-Count: @(nuspecStaged->Count())" Importance="normal"/>
    <Message Text="nuspecs: @(nuspecStaged)" Importance="normal"/>
    <Message Text="  %(nuspecStaged.Identity)" Importance="normal" />

    <MakeDir Directories="$(msb-OutputPath)" />

    <Exec Command="$(msb-NugetExe) &quot;%(nuspecStaged.Identity)&quot;" Condition="'%(nuspecStaged.Identity)' != ''"/>
  </Target>

  
  

  <Target Name="NugetCleanupFolderStructure">

    <ItemGroup>
      <filesToDelete Include="$(msb-NugetStage)"/>
      <filesToDelete Include="$(msb-OutputPath)" />
      <foldersToDelete Include="%(filesToDelete.RelativeDir)" />
    </ItemGroup>

    <Message Text=">> filesToDelete:   @(filesToDelete)" Importance="low" />
    <Message Text=">> foldersToDelete: @(foldersToDelete)" Importance="low" />

    <Delete Files="@(filesToDelete)" />
    <RemoveDir Directories="@(foldersToDelete)" ContinueOnError="true" />
  </Target>

</Project>
